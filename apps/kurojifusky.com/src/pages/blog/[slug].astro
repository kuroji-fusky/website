---
export const prerender = true

import { getImage } from "astro:assets"
import { documentToHtmlString } from "@contentful/rich-text-html-renderer"

import Layout from "$layouts/Layout.astro"
import { fetchBlogPosts, rendererOptions, parseForTOC } from "$lib/contentful"
import BlogHeader from "$components/blog/BlogHeader.astro"
import BlogTOC from "$components/blog/BlogTOC.svelte"
import ParseArticle from "$components/ParseArticle.astro"

export async function getStaticPaths() {
  const posts = await fetchBlogPosts({})

  return posts.map((item) => ({
    params: { slug: item.slug },
    props: {
      title: item.title,
      description: item.description,
      date: item.date,
      shit: item.content,
      banner: item.banner,
      categories: item.category,
      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
      fromSeries: item.fromSeries as any,
      authors: item.authors
    }
  }))
}

const {
  title,
  description,
  shit,
  date,
  banner,
  categories,
  fromSeries,
  authors
} = Astro.props

const { host } = Astro.url

const baseUrl = `https://${host}`

const backdropImg = await getImage({
  src: banner,
  format: "webp",
  inferSize: true
})
---

<script>
  await import("$components/embeds/YoutubeEmbed")
</script>

<Layout {title} {description} webpageType="article">
  <Fragment slot="other-meta">
    <meta property="og:image" content={backdropImg.src} />
    <meta name="twitter:image" content={backdropImg.src} />
    <link rel="preload" href={backdropImg.src} as="image" />
  </Fragment>
  <div class="relative">
    <div
      class="padding-width-responsive max-w-screen-lg mx-auto pt-3 prose-headings:font-bold flex flex-col gap-y-5 [&_p]:leading-7 lg:[&_p]:leading-8"
      itemtype="https://schema.org/Blog"
      itemscope
    >
      <meta itemprop="thumbnailUrl" content={backdropImg.src} />
      <BlogHeader
        {categories}
        {title}
        {description}
        {baseUrl}
        {fromSeries}
        {authors}
        {date}
        {banner}
      />
    </div>
  </div>
  <div
    class="mt-2.5 padding-width-responsive max-w-screen-lg mx-auto flex flex-col-reverse gap-y-2.5 md:flex-row"
  >
    <ParseArticle set:html={documentToHtmlString(shit, rendererOptions)} />
    <BlogTOC client:idle>
      <ul
        class="flex flex-col gap-y-1 [&_a]:text-white [&_a]:opacity-60 hover:[&_a]:opacity-100 hover:[&_a]:text-kuro-violet-100"
        set:html={documentToHtmlString(shit, parseForTOC)}
      />
    </BlogTOC>
  </div>
</Layout>
